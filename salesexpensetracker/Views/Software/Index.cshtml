<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
    <link rel="shortcut icon" href="~/Images/icon/streetsmartLogo.ico">
    <title>Sales & Expense Tracker - Main Menu </title>

    @Styles.Render("~/Content/Software-css")

    <style>
        .title {
            font-size: 19px;
            margin-top: 20px;
            margin-bottom: 30px;
            color: #1c6c74;
            margin-left: 10px;
        }

        .icon-card-setup {
            display: inline-block;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            text-align: center;
            background-color: #65828c;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            width: 150px;
            margin-bottom: 20px;
        }

            .icon-card-setup:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 20px #65828c;
            }

            .icon-card-setup h4 {
                margin: 10px 0 0 0;
                font-size: 16px;
                color: whitesmoke;
            }

            .icon-card-setup .emoji {
                font-size: 36px;
            }
        .icon-card-activity {
            display: inline-block;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            text-align: center;
            background-color: #21c1a3;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            width: 150px;
            margin-bottom: 20px;
        }

            .icon-card-activity:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 20px #21c1a3;
            }

            .icon-card-activity h4 {
                margin: 10px 0 0 0;
                font-size: 16px;
                color: whitesmoke;
            }

            .icon-card-activity .emoji {
                font-size: 36px;
            }
        .icon-card-report {
            display: inline-block;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            text-align: center;
            background-color: #1e6969;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            width: 150px;
            margin-bottom: 20px;
        }

            .icon-card-report:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 20px #1e6969;
            }

            .icon-card-report h4 {
                margin: 10px 0 0 0;
                font-size: 16px;
                color: whitesmoke;
            }

            .icon-card-report .emoji {
                font-size: 36px;
            }

        .a-icon {
            margin-left: 40px;
        }
    </style>
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")
            <section class="container" style="padding-top: 20px">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="row title">⚙️ Setup</div>
                        <div class="row">
                            <div class="col-md-12">
                                <a class="a-icon" href="/Software/ProductList">
                                    <div class="icon-card-setup">
                                        <div class="emoji">📦</div>
                                        <h4>Product</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/Customer">
                                    <div class="icon-card-setup">
                                        <div class="emoji">🙋</div>
                                        <h4>Client</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/Supplier">
                                    <div class="icon-card-setup">
                                        <div class="emoji">🧑‍💼</div>
                                        <h4>Supplier</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/User">
                                    <div class="icon-card-setup">
                                        <div class="emoji">🧑‍💻</div>
                                        <h4>User</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/Bank">
                                    <div class="icon-card-setup">
                                        <div class="emoji">🏦</div>
                                        <h4>Bank</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/Expense">
                                    <div class="icon-card-setup">
                                        <div class="emoji">💸</div>
                                        <h4>Expense</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/PayType">
                                    <div class="icon-card-setup">
                                        <div class="emoji">💳</div>
                                        <h4>Pay Type</h4>
                                    </div>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="row title">📝 Activity</div>
                        <div class="row">
                            <div class="col-md-12">
                                <a class="a-icon" href="/Software/Sales">
                                    <div class="icon-card-activity">
                                        <div class="emoji">🧾</div>
                                        <h4>Sales</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/Collection">
                                    <div class="icon-card-activity">
                                        <div class="emoji">💰</div>
                                        <h4>Collection</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/Disbursement">
                                    <div class="icon-card-activity">
                                        <div class="emoji">📉</div>
                                        <h4>Disbursement</h4>
                                    </div>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="row title">📑 Report</div>
                        <div class="row">
                            <div class="col-md-12">
                                <a class="a-icon" href="/Software/SalesReport">
                                    <div class="icon-card-report">
                                        <div class="emoji">🖨️</div>
                                        <h4>Sales</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/CollectionReport">
                                    <div class="icon-card-report">
                                        <div class="emoji">🖨️</div>
                                        <h4>Collection</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/DisbursementReport">
                                    <div class="icon-card-report">
                                        <div class="emoji">🖨️</div>
                                        <h4>Disbursement</h4>
                                    </div>
                                </a>
                                <a class="a-icon" href="/Software/CashFlowReport">
                                    <div class="icon-card-report">
                                        <div class="emoji">🖨️</div>
                                        <h4>Cash Flow</h4>
                                    </div>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    <!--
        ==========================
        Accounts Payable Past Dues
        ==========================
    -->
    <div class="modal fade" id="accountsPayablePastDueModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Accounts Payable Past Dues</h4>
                </div>
                <div class="modal-body">
                    <div class="panel panel-default">

                        <!--
                            =========
                            Flex Grid
                            =========
                        -->
                        <div class="panel-body">
                            <center>
                                <span id="accountsPayableReportPastDueLoading"></span>
                            </center>
                            <div id="accountsPayableReportPastDueContent">
                                <div id="accountsPayableReportPastDueFlexGrid"></div>
                            </div>
                        </div>

                        <!--
                            ====================
                            Navigation Page Grid
                            ====================
                        -->
                        <div class="panel-footer">
                            <div class="row">
                                <div class="btn-group col-md-7" id="accountsPayableReportPastDueNavigationPageGrid">
                                    <button type="button" class="btn btn-default border-custom" id="btnAccountsPayableReportPastDueMoveToFirstPageGrid">
                                        <span class="glyphicon glyphicon-fast-backward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" id="btnAccountsPayableReportPastDueMoveToPreviousPageGrid">
                                        <span class="glyphicon glyphicon-step-backward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnAccountsPayableReportPastDueCurrentPageGrid"></button>
                                    <button type="button" class="btn btn-default border-custom" id="btnAccountsPayableReportPastDueMoveToNextPageGrid">
                                        <span class="glyphicon glyphicon-step-forward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" id="btnAccountsPayableReportPastDueMoveToLastPageGrid">
                                        <span class="glyphicon glyphicon-fast-forward"></span>
                                    </button>
                                </div>
                                <div class="col-md-1"></div>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon"><b>Total Amount</b></span>
                                        <input type="text" class="form-control numberField" id="inpTotalAccountsPayableReportPastDueBalance" placeholder="0.00" disabled>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnAccountsPayableReportPastDueApplyCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>
    <!--
        =============================
        Accounts Receivable Past Dues
        =============================
    -->
    <div class="modal fade" id="accountsReceivablePastDueModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Accounts Receivable Past Dues</h4>
                </div>
                <div class="modal-body">
                    <div class="panel panel-default">

                        <!--
                            =========
                            Flex Grid
                            =========
                        -->
                        <div class="panel-body">
                            <center>
                                <span id="accountsReceivableReportPastDueLoading"></span>
                            </center>
                            <div id="accountsReceivableReportPastDueContent">
                                <div id="accountsReceivableReportPastDueFlexGrid"></div>
                            </div>
                        </div>

                        <!--
                            ====================
                            Navigation Page Grid
                            ====================
                        -->
                        <div class="panel-footer">
                            <div class="row">
                                <div class="btn-group col-md-7" id="accountsReceivableReportPastDueNavigationPageGrid">
                                    <button type="button" class="btn btn-default border-custom" id="btnAccountsReceivableReportPastDueMoveToFirstPageGrid">
                                        <span class="glyphicon glyphicon-fast-backward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" id="btnAccountsReceivableReportPastDueMoveToPreviousPageGrid">
                                        <span class="glyphicon glyphicon-step-backward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnAccountsReceivableReportPastDueCurrentPageGrid"></button>
                                    <button type="button" class="btn btn-default border-custom" id="btnAccountsReceivableReportPastDueMoveToNextPageGrid">
                                        <span class="glyphicon glyphicon-step-forward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" id="btnAccountsReceivableReportPastDueMoveToLastPageGrid">
                                        <span class="glyphicon glyphicon-fast-forward"></span>
                                    </button>
                                </div>
                                <div class="col-md-1"></div>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon"><b>Total Amount</b></span>
                                        <input type="text" class="form-control numberField" id="inpTotalAccountsReceivableReportPastDueBalance" placeholder="0.00" disabled>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="btnAccountsReceivableReportPastDueApplyCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>
    <!--
        =================
        Stock Level Alert
        =================
    -->
    <div class="modal fade" id="stockLevelAlertModal" role="dialog">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Stock Level Alert</h4>
                </div>
                <div class="modal-body">
                    <div class="panel panel-default">

                        <!--
                            =========
                            Flex Grid
                            =========
                        -->
                        <div class="panel-body">
                            <center>
                                <span id="stockLevelAlertLoading"></span>
                            </center>
                            <div id="stockLevelAlertContent">
                                <div id="stockLevelAlertFlexGrid"></div>
                            </div>
                        </div>

                        <!--
                            ====================
                            Navigation Page Grid
                            ====================
                        -->
                        <div class="panel-footer">
                            <div class="row">
                                <div class="btn-group col-md-7" id="stockLevelAlertNavigationPageGrid">
                                    <button type="button" class="btn btn-default border-custom" id="btnStockLevelAlertMoveToFirstPageGrid">
                                        <span class="glyphicon glyphicon-fast-backward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" id="btnStockLevelAlertMoveToPreviousPageGrid">
                                        <span class="glyphicon glyphicon-step-backward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnStockLevelAlertCurrentPageGrid"></button>
                                    <button type="button" class="btn btn-default border-custom" id="btnStockLevelAlertMoveToNextPageGrid">
                                        <span class="glyphicon glyphicon-step-forward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" id="btnStockLevelAlertMoveToLastPageGrid">
                                        <span class="glyphicon glyphicon-fast-forward"></span>
                                    </button>
                                </div>
                                <div class="col-md-1"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnStockLevelAlertPrint" onclick="btnStockLevelAlertPrintOnclick()"><i class="fa fa-print"></i> Print</button>
                    <button id="btnStockLevelAlertApplyCloseModal" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
                </div>
            </div>
        </div>
    </div>


    @Scripts.Render("~/Scripts/Software-js")
    <script type="text/javascript">
        // ============
        // On Load Page
        // ============
        $(document).ready(function () {
            NProgress.start();
            NProgress.done();
            if ("@ViewData["ActivateChampion"]" === "True") {
                checkAPPastDue();
            }
        });
    </script>
    <script type="text/javascript">
        // ==============================================================
        // Accounts Payable Report Past Due Collection View and Flex Grid
        // ==============================================================
        var accountsPayableReportPastDueCollectionView;
        var accountsPayableReportPastDueFlexGrid = new wijmo.grid.FlexGrid('#accountsPayableReportPastDueFlexGrid');
        var accountsPayableReportPastDueFlexGridFilter;

        // ===========================================
        // Accounts Payable Past Due Navigation Button
        // ===========================================
        var btnAccountsPayableReportPastDueMoveToFirstPageGrid = document.getElementById('btnAccountsPayableReportPastDueMoveToFirstPageGrid');
        var btnAccountsPayableReportPastDueMoveToPreviousPageGrid = document.getElementById('btnAccountsPayableReportPastDueMoveToPreviousPageGrid');
        var btnAccountsPayableReportPastDueMoveToNextPageGrid = document.getElementById('btnAccountsPayableReportPastDueMoveToNextPageGrid');
        var btnAccountsPayableReportPastDueMoveToLastPageGrid = document.getElementById('btnAccountsPayableReportPastDueMoveToLastPageGrid');
        var btnAccountsPayableReportPastDueCurrentPageGrid = document.getElementById('btnAccountsPayableReportPastDueCurrentPageGrid');
        var accountsPayableReportPastDueCurrentPageIndex = 0;

        // =================================================================
        // Accounts Receivable Report Past Due Collection View and Flex Grid
        // =================================================================
        var accountsReceivableReportPastDueCollectionView;
        var accountsReceivableReportPastDueFlexGrid = new wijmo.grid.FlexGrid('#accountsReceivableReportPastDueFlexGrid');
        var accountsReceivableReportPastDueFlexGridFilter;

        // ==============================================
        // Accounts Receivable Past Due Navigation Button
        // ==============================================
        var btnAccountsReceivableReportPastDueMoveToFirstPageGrid = document.getElementById('btnAccountsReceivableReportPastDueMoveToFirstPageGrid');
        var btnAccountsReceivableReportPastDueMoveToPreviousPageGrid = document.getElementById('btnAccountsReceivableReportPastDueMoveToPreviousPageGrid');
        var btnAccountsReceivableReportPastDueMoveToNextPageGrid = document.getElementById('btnAccountsReceivableReportPastDueMoveToNextPageGrid');
        var btnAccountsReceivableReportPastDueMoveToLastPageGrid = document.getElementById('btnAccountsReceivableReportPastDueMoveToLastPageGrid');
        var btnAccountsReceivableReportPastDueCurrentPageGrid = document.getElementById('btnAccountsReceivableReportPastDueCurrentPageGrid');
        var accountsReceivableReportPastDueCurrentPageIndex = 0;

        // ===============================================
        // Stock Level Alert Collection View and Flex Grid
        // ===============================================
        var stockLevelAlertReportPastDueCollectionView;
        var stockLevelAlertFlexGrid = new wijmo.grid.FlexGrid('#stockLevelAlertFlexGrid');
        var stockLevelAlertFlexGridFilter;

        // ===================================
        // Stock Level Alert Navigation Button
        // ===================================
        var btnStockLevelAlertMoveToFirstPageGrid = document.getElementById('btnStockLevelAlertMoveToFirstPageGrid');
        var btnStockLevelAlertMoveToPreviousPageGrid = document.getElementById('btnStockLevelAlertMoveToPreviousPageGrid');
        var btnStockLevelAlertMoveToNextPageGrid = document.getElementById('btnStockLevelAlertMoveToNextPageGrid');
        var btnStockLevelAlertMoveToLastPageGrid = document.getElementById('btnStockLevelAlertMoveToLastPageGrid');
        var btnStockLevelAlertCurrentPageGrid = document.getElementById('btnStockLevelAlertCurrentPageGrid');
        var stockLevelAlertCurrentPageIndex = 0;

        // =====================================
        // Accounts Payable Report Past Due Data
        // =====================================
        function getAccountsPayableReportPastDueData() {
            var accountsPayableReportPastDueObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/accountsPayable/pastDueList',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    var totalBalance = 0;

                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountsPayableReportPastDueObservableArray.push({
                                RRId: results[i]["RRId"],
                                Branch: results[i]["Branch"],
                                Account: results[i]["Account"],
                                RRNumber: results[i]["RRNumber"],
                                RRDate: results[i]["RRDate"],
                                SupplierCode: results[i]["SupplierCode"],
                                Supplier: results[i]["Supplier"],
                                DocumentReference: results[i]["DocumentReference"],
                                DueDateString: results[i]["DueDateString"],
                                BalanceAmount: results[i]["BalanceAmount"],
                                BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });

                            totalBalance += results[i]["BalanceAmount"];
                        }
                    }

                    $('#accountsPayableReportPastDueLoading').hide();
                    $('#accountsPayableReportPastDueContent').show();

                    document.getElementById("inpTotalAccountsPayableReportPastDueBalance").value = parseFloat(totalBalance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                }
            });

            return accountsPayableReportPastDueObservableArray;
        }

        // ========================================
        // Accounts Receivable Report Past Due Data
        // ========================================
        function getAccountsReceivableReportPastDueData() {
            var accountsReceivableReportPastDueObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/accountsReceivable/pastDueList',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    var totalBalance = 0;

                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            accountsReceivableReportPastDueObservableArray.push({
                                SIId: results[i]["SIId"],
                                Branch: results[i]["Branch"],
                                Account: results[i]["Account"],
                                SINumber: results[i]["SINumber"],
                                SIDate: results[i]["SIDate"],
                                CustomerCode: results[i]["CustomerCode"],
                                Customer: results[i]["Customer"],
                                SIRefNo: results[i]["SIRefNo"],
                                DocumentReference: results[i]["DocumentReference"],
                                DueDateString: results[i]["DueDateString"],
                                BalanceAmount: results[i]["BalanceAmount"],
                                BalanceAmountDisplay: parseFloat(results[i]["BalanceAmount"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });

                            totalBalance += results[i]["BalanceAmount"];
                        }
                    }

                    $('#accountsReceivableReportPastDueLoading').hide();
                    $('#accountsReceivableReportPastDueContent').show();

                    document.getElementById("inpTotalAccountsReceivableReportPastDueBalance").value = parseFloat(totalBalance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                }
            });

            return accountsReceivableReportPastDueObservableArray;
        }

        // ==================
        // Stock Level Alert
        // ==================
        function getStockLevelAlertData() {
            var stockLevelAlertObservableArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/inventoryReport/stockLevelAlertList',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        for (i = 0; i < results.length; i++) {
                            stockLevelAlertObservableArray.push({
                                ItemId: results[i]["ItemId"],
                                ManualArticleCode: results[i]["ManualArticleCode"],
                                ItemDescription: results[i]["ItemDescription"],
                                BalanceQty: results[i]["BalanceQty"],
                                BalanceQtyDisplay: parseFloat(results[i]["BalanceQty"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
                                StockLevelQty: results[i]["StockLevelQty"],
                                StockLevelQtyDisplay: parseFloat(results[i]["StockLevelQty"]).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                            });
                        }
                    }

                    $('#stockLevelAlertLoading').hide();
                    $('#stockLevelAlertContent').show();
                }
            });

            return stockLevelAlertObservableArray;
        }

        function btnStockLevelAlertPrintOnclick() {
            var pirntLink = '/RepStockLevelAlert/StockLevelAlertList';
            window.open(pirntLink, '_blank');
        }

        // ==================================================
        // Create Accounts Payable Report Past Due Flex Grid
        // ==================================================
        function createAccounstPayableReportPastDueFlexGrid() {
            accountsPayableReportPastDueCollectionView = new wijmo.collections.CollectionView(getAccountsPayableReportPastDueData());
            accountsPayableReportPastDueCollectionView.canFilter = true;
            accountsPayableReportPastDueCollectionView.pageSize = 10;

            accountsPayableReportPastDueCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateAccountsPayableReportPastDueNavigateButtons();
            });

            accountsPayableReportPastDueFlexGrid.dispose();
            accountsPayableReportPastDueFlexGrid = new wijmo.grid.FlexGrid('#accountsPayableReportPastDueFlexGrid');
            accountsPayableReportPastDueFlexGrid.initialize({
                columns: [
                    {
                        "header": "RR Number",
                        "binding": "RRNumber",
                        "allowSorting": true,
                        "width": "1.2*"
                    },
                    {
                        "header": "Date",
                        "binding": "RRDate",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Doc. Ref.",
                        "binding": "DocumentReference",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Supplier",
                        "binding": "Supplier",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Due Date",
                        "binding": "DueDateString",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 130
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: accountsPayableReportPastDueCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row,
                frozenColumns: 1
            });

            accountsPayableReportPastDueFlexGrid.trackChanges = true;

            accountsPayableReportPastDueFlexGridFilter = new wijmo.grid.filter.FlexGridFilter(accountsPayableReportPastDueFlexGrid);
            accountsPayableReportPastDueFlexGridFilter.defaultFilterType = wijmo.grid.filter.FilterType.Both;

            accountsPayableReportPastDueFlexGridFilter.filterApplied.addHandler(function (sender, args) {
                var totalBalance = 0;

                accountsPayableReportPastDueCollectionView.moveToFirstPage();

                for (var p = 1; p <= accountsPayableReportPastDueCollectionView.pageCount; p++) {
                    for (i = 0; i < accountsPayableReportPastDueCollectionView.items.length; i++) {
                        totalBalance += parseFloat(accountsPayableReportPastDueCollectionView.items[i].BalanceAmount);
                    }

                    accountsPayableReportPastDueCollectionView.moveToNextPage();
                    if (p == accountsPayableReportPastDueCollectionView.pageCount) {
                        accountsPayableReportPastDueCollectionView.moveToPage(accountsPayableReportPastDueCurrentPageIndex - 1);
                    }
                }

                document.getElementById("inpTotalAccountsPayableReportPastDueBalance").value = parseFloat(totalBalance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            });

            updateAccountsPayableReportPastDueNavigateButtons();

            btnAccountsPayableReportPastDueMoveToFirstPageGrid.addEventListener('click', function () {
                accountsPayableReportPastDueCollectionView.moveToFirstPage();
                accountsPayableReportPastDueCurrentPageIndex = accountsPayableReportPastDueCollectionView.pageIndex + 1;
                updateAccountsPayableReportPastDueNavigateButtons();
            });

            btnAccountsPayableReportPastDueMoveToPreviousPageGrid.addEventListener('click', function () {
                accountsPayableReportPastDueCollectionView.moveToPreviousPage();
                accountsPayableReportPastDueCurrentPageIndex = accountsPayableReportPastDueCollectionView.pageIndex + 1;
                updateAccountsPayableReportPastDueNavigateButtons();
            });

            btnAccountsPayableReportPastDueMoveToNextPageGrid.addEventListener('click', function () {
                accountsPayableReportPastDueCollectionView.moveToNextPage();
                accountsPayableReportPastDueCurrentPageIndex = accountsPayableReportPastDueCollectionView.pageIndex + 1;
                updateAccountsPayableReportPastDueNavigateButtons();
            });

            btnAccountsPayableReportPastDueMoveToLastPageGrid.addEventListener('click', function () {
                accountsPayableReportPastDueCollectionView.moveToLastPage();
                accountsPayableReportPastDueCurrentPageIndex = accountsPayableReportPastDueCollectionView.pageIndex + 1;
                updateAccountsPayableReportPastDueNavigateButtons();
            });

        }

        // ====================================================
        // Create Accounts Receivable Report Past Due Flex Grid
        // ====================================================
        function createAccounstReceivableReportPastDueFlexGrid() {
            accountsReceivableReportPastDueCollectionView = new wijmo.collections.CollectionView(getAccountsReceivableReportPastDueData());
            accountsReceivableReportPastDueCollectionView.canFilter = true;
            accountsReceivableReportPastDueCollectionView.pageSize = 10;

            accountsReceivableReportPastDueCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateAccountsReceivableReportPastDueNavigateButtons();
            });

            accountsReceivableReportPastDueFlexGrid.dispose();
            accountsReceivableReportPastDueFlexGrid = new wijmo.grid.FlexGrid('#accountsReceivableReportPastDueFlexGrid');
            accountsReceivableReportPastDueFlexGrid.initialize({
                columns: [
                    {
                        "header": "SI Number",
                        "binding": "SINumber",
                        "allowSorting": true,
                        "width": "1.2*"
                    },
                    {
                        "header": "Date",
                        "binding": "SIDate",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "SI Ref. No.",
                        "binding": "SIRefNo",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Doc. Ref.",
                        "binding": "DocumentReference",
                        "allowSorting": true,
                        "width": "1*"
                    },
                    {
                        "header": "Customer",
                        "binding": "Customer",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Due Date",
                        "binding": "DueDateString",
                        "allowSorting": true,
                        "width": 100
                    },
                    {
                        "header": "Balance",
                        "binding": "BalanceAmountDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 130
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: accountsReceivableReportPastDueCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row,
                frozenColumns: 1
            });

            accountsReceivableReportPastDueFlexGrid.trackChanges = true;

            accountsReceivableReportPastDueFlexGridFilter = new wijmo.grid.filter.FlexGridFilter(accountsReceivableReportPastDueFlexGrid);
            accountsReceivableReportPastDueFlexGridFilter.defaultFilterType = wijmo.grid.filter.FilterType.Both;

            accountsReceivableReportPastDueFlexGridFilter.filterApplied.addHandler(function (sender, args) {
                var totalBalance = 0;

                accountsReceivableReportPastDueCollectionView.moveToFirstPage();

                for (var p = 1; p <= accountsReceivableReportPastDueCollectionView.pageCount; p++) {
                    for (i = 0; i < accountsReceivableReportPastDueCollectionView.items.length; i++) {
                        totalBalance += parseFloat(accountsReceivableReportPastDueCollectionView.items[i].BalanceAmount);
                    }

                    accountsReceivableReportPastDueCollectionView.moveToNextPage();
                    if (p == accountsReceivableReportPastDueCollectionView.pageCount) {
                        accountsReceivableReportPastDueCollectionView.moveToPage(accountsReceivableReportPastDueCurrentPageIndex - 1);
                    }
                }

                document.getElementById("inpTotalAccountsReceivableReportPastDueBalance").value = parseFloat(totalBalance).toFixed(2).toLocaleString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            });

            updateAccountsReceivableReportPastDueNavigateButtons();

            btnAccountsReceivableReportPastDueMoveToFirstPageGrid.addEventListener('click', function () {
                accountsReceivableReportPastDueCollectionView.moveToFirstPage();
                accountsReceivableReportPastDueCurrentPageIndex = accountsReceivableReportPastDueCollectionView.pageIndex + 1;
                updateAccountsReceivableReportPastDueNavigateButtons();
            });

            btnAccountsReceivableReportPastDueMoveToPreviousPageGrid.addEventListener('click', function () {
                accountsReceivableReportPastDueCollectionView.moveToPreviousPage();
                accountsReceivableReportPastDueCurrentPageIndex = accountsReceivableReportPastDueCollectionView.pageIndex + 1;
                updateAccountsReceivableReportPastDueNavigateButtons();
            });

            btnAccountsReceivableReportPastDueMoveToNextPageGrid.addEventListener('click', function () {
                accountsReceivableReportPastDueCollectionView.moveToNextPage();
                accountsReceivableReportPastDueCurrentPageIndex = accountsReceivableReportPastDueCollectionView.pageIndex + 1;
                updateAccountsReceivableReportPastDueNavigateButtons();
            });

            btnAccountsReceivableReportPastDueMoveToLastPageGrid.addEventListener('click', function () {
                accountsReceivableReportPastDueCollectionView.moveToLastPage();
                accountsReceivableReportPastDueCurrentPageIndex = accountsReceivableReportPastDueCollectionView.pageIndex + 1;
                updateAccountsReceivableReportPastDueNavigateButtons();
            });

        }

        // ==================================
        // Create Stock Level Alert Flex Grid
        // ==================================
        function createStockLevelAlertFlexGrid() {
            stockLevelAlertCollectionView = new wijmo.collections.CollectionView(getStockLevelAlertData());
            stockLevelAlertCollectionView.canFilter = true;
            stockLevelAlertCollectionView.pageSize = 10;

            stockLevelAlertCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateStockLevelAlertNavigateButtons();
            });

            stockLevelAlertFlexGrid.dispose();
            stockLevelAlertFlexGrid = new wijmo.grid.FlexGrid('#stockLevelAlertFlexGrid');
            stockLevelAlertFlexGrid.initialize({
                columns: [
                    {
                        "header": "Barcode",
                        "binding": "ManualArticleCode",
                        "allowSorting": true,
                        "width": 150
                    },
                    {
                        "header": "Item Description",
                        "binding": "ItemDescription",
                        "allowSorting": true,
                        "width": "2*"
                    },
                    {
                        "header": "Balance Qty",
                        "binding": "BalanceQtyDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 140
                    },
                    {
                        "header": "Stock Level Qty",
                        "binding": "StockLevelQtyDisplay",
                        "allowSorting": true,
                        "align": "right",
                        "width": 140
                    }
                ],
                autoGenerateColumns: false,
                itemsSource: stockLevelAlertCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row,
                frozenColumns: 1
            });

            stockLevelAlertFlexGrid.trackChanges = true;

            stockLevelAlertFlexGridFilter = new wijmo.grid.filter.FlexGridFilter(stockLevelAlertFlexGrid);
            stockLevelAlertFlexGridFilter.defaultFilterType = wijmo.grid.filter.FilterType.Both;

            stockLevelAlertFlexGridFilter.filterApplied.addHandler(function (sender, args) {

                stockLevelAlertCollectionView.moveToFirstPage();

                for (var p = 1; p <= stockLevelAlertCollectionView.pageCount; p++) {
                    stockLevelAlertCollectionView.moveToNextPage();
                    if (p == stockLevelAlertCollectionView.pageCount) {
                        stockLevelAlertCollectionView.moveToPage(stockLevelAlertCurrentPageIndex - 1);
                    }
                }
            });

            updateStockLevelAlertNavigateButtons();

            btnStockLevelAlertMoveToFirstPageGrid.addEventListener('click', function () {
                stockLevelAlertCollectionView.moveToFirstPage();
                stockLevelAlertCurrentPageIndex = stockLevelAlertCollectionView.pageIndex + 1;
                updateStockLevelAlertNavigateButtons();
            });

            btnStockLevelAlertMoveToPreviousPageGrid.addEventListener('click', function () {
                stockLevelAlertCollectionView.moveToPreviousPage();
                stockLevelAlertCurrentPageIndex = stockLevelAlertCollectionView.pageIndex + 1;
                updateStockLevelAlertNavigateButtons();
            });

            btnStockLevelAlertMoveToNextPageGrid.addEventListener('click', function () {
                stockLevelAlertCollectionView.moveToNextPage();
                stockLevelAlertCurrentPageIndex = stockLevelAlertCollectionView.pageIndex + 1;
                updateStockLevelAlertNavigateButtons();
            });

            btnStockLevelAlertMoveToLastPageGrid.addEventListener('click', function () {
                stockLevelAlertCollectionView.moveToLastPage();
                stockLevelAlertCurrentPageIndex = stockLevelAlertCollectionView.pageIndex + 1;
                updateStockLevelAlertNavigateButtons();
            });

        }

        // ==========================================================
        // Update Accounst Payable Report Past Due Navigation Buttons
        // ==========================================================
        function updateAccountsPayableReportPastDueNavigateButtons() {
            if (accountsPayableReportPastDueCollectionView.pageSize <= 0) {
                document.getElementById('accountsPayableReportPastDueNavigationPageGrid').style.display = 'none';
                return;
            }

            document.getElementById('accountsPayableReportPastDueNavigationPageGrid').style.display = 'block';

            if (accountsPayableReportPastDueCollectionView.pageIndex === 0) {
                btnAccountsPayableReportPastDueMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnAccountsPayableReportPastDueMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnAccountsPayableReportPastDueMoveToNextPageGrid.removeAttribute('disabled');
                btnAccountsPayableReportPastDueMoveToLastPageGrid.removeAttribute('disabled');
            } else if (accountsPayableReportPastDueCollectionView.pageIndex === (accountsPayableReportPastDueCollectionView.pageCount - 1)) {
                btnAccountsPayableReportPastDueMoveToFirstPageGrid.removeAttribute('disabled');
                btnAccountsPayableReportPastDueMoveToPreviousPageGrid.removeAttribute('disabled');
                btnAccountsPayableReportPastDueMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                btnAccountsPayableReportPastDueMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnAccountsPayableReportPastDueMoveToFirstPageGrid.removeAttribute('disabled');
                btnAccountsPayableReportPastDueMoveToPreviousPageGrid.removeAttribute('disabled');
                btnAccountsPayableReportPastDueMoveToNextPageGrid.removeAttribute('disabled');
                btnAccountsPayableReportPastDueMoveToLastPageGrid.removeAttribute('disabled');
            }

            btnAccountsPayableReportPastDueCurrentPageGrid.innerHTML = (accountsPayableReportPastDueCollectionView.pageIndex + 1) + ' / ' + accountsPayableReportPastDueCollectionView.pageCount;
        }

        // =============================================================
        // Update Accounst Receivable Report Past Due Navigation Buttons
        // =============================================================
        function updateAccountsReceivableReportPastDueNavigateButtons() {
            if (accountsReceivableReportPastDueCollectionView.pageSize <= 0) {
                document.getElementById('accountsReceivableReportPastDueNavigationPageGrid').style.display = 'none';
                return;
            }

            document.getElementById('accountsReceivableReportPastDueNavigationPageGrid').style.display = 'block';

            if (accountsReceivableReportPastDueCollectionView.pageIndex === 0) {
                btnAccountsReceivableReportPastDueMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnAccountsReceivableReportPastDueMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnAccountsReceivableReportPastDueMoveToNextPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportPastDueMoveToLastPageGrid.removeAttribute('disabled');
            } else if (accountsReceivableReportPastDueCollectionView.pageIndex === (accountsReceivableReportPastDueCollectionView.pageCount - 1)) {
                btnAccountsReceivableReportPastDueMoveToFirstPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportPastDueMoveToPreviousPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportPastDueMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                btnAccountsReceivableReportPastDueMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnAccountsReceivableReportPastDueMoveToFirstPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportPastDueMoveToPreviousPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportPastDueMoveToNextPageGrid.removeAttribute('disabled');
                btnAccountsReceivableReportPastDueMoveToLastPageGrid.removeAttribute('disabled');
            }

            btnAccountsReceivableReportPastDueCurrentPageGrid.innerHTML = (accountsReceivableReportPastDueCollectionView.pageIndex + 1) + ' / ' + accountsReceivableReportPastDueCollectionView.pageCount;
        }

        // ===========================================
        // Update Stock Level Alert Navigation Buttons
        // ===========================================
        function updateStockLevelAlertNavigateButtons() {
            if (stockLevelAlertCollectionView.pageSize <= 0) {
                document.getElementById('stockLevelAlertNavigationPageGrid').style.display = 'none';
                return;
            }

            document.getElementById('stockLevelAlertNavigationPageGrid').style.display = 'block';

            if (stockLevelAlertCollectionView.pageIndex === 0) {
                btnStockLevelAlertMoveToFirstPageGrid.setAttribute('disabled', 'disabled');
                btnStockLevelAlertMoveToPreviousPageGrid.setAttribute('disabled', 'disabled');
                btnStockLevelAlertMoveToNextPageGrid.removeAttribute('disabled');
                btnStockLevelAlertMoveToLastPageGrid.removeAttribute('disabled');
            } else if (stockLevelAlertCollectionView.pageIndex === (stockLevelAlertCollectionView.pageCount - 1)) {
                btnStockLevelAlertMoveToFirstPageGrid.removeAttribute('disabled');
                btnStockLevelAlertMoveToPreviousPageGrid.removeAttribute('disabled');
                btnStockLevelAlertMoveToNextPageGrid.setAttribute('disabled', 'disabled');
                btnStockLevelAlertMoveToLastPageGrid.setAttribute('disabled', 'disabled');
            } else {
                btnStockLevelAlertMoveToFirstPageGrid.removeAttribute('disabled');
                btnStockLevelAlertMoveToPreviousPageGrid.removeAttribute('disabled');
                btnStockLevelAlertMoveToNextPageGrid.removeAttribute('disabled');
                btnStockLevelAlertMoveToLastPageGrid.removeAttribute('disabled');
            }

            btnStockLevelAlertCurrentPageGrid.innerHTML = (stockLevelAlertCollectionView.pageIndex + 1) + ' / ' + stockLevelAlertCollectionView.pageCount;
        }

        // ==================
        // Launch Past Due AP
        // ==================
        function btnAccountsPayablePastDues() {
            $('#accountsPayablePastDueModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('#accountsPayableReportPastDueLoading').show();
            document.getElementById("accountsPayableReportPastDueLoading").innerHTML = "Loading...";
            $('#accountsPayableReportPastDueContent').hide();

            setTimeout(function () {
                createAccounstPayableReportPastDueFlexGrid();
            }, 500);
        }

        // ==================
        // Launch Past Due AR
        // ==================
        function btnAccountsReceivablePastDues() {
            $('#accountsReceivablePastDueModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('#accountsReceivableReportPastDueLoading').show();
            document.getElementById("accountsReceivableReportPastDueLoading").innerHTML = "Loading...";
            $('#accountsReceivableReportPastDueContent').hide();

            setTimeout(function () {
                createAccounstReceivableReportPastDueFlexGrid();
            }, 500);
        }
        // ========================
        // Launch Stock Level Alert
        // ========================
        function btnStockLevelAlert() {
            $('#stockLevelAlertModal').modal({
                show: true,
                backdrop: 'static'
            });

            $('#stockLevelAlertLoading').show();
            document.getElementById("stockLevelAlertLoading").innerHTML = "Loading...";
            $('#stockLevelAlertContent').hide();

            setTimeout(function () {
                createStockLevelAlertFlexGrid();
            }, 500);
        }

        // =================
        // Check AP Past Due
        // =================
        function checkAPPastDue() {
            $.ajax({
                url: '/api/accountsPayable/pastDueList',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        document.getElementById('pastDueAP').innerHTML = " *AP Past Dues";
                    }
                    else {
                        document.getElementById('pastDueAP').innerHTML = "";
                    }
                }
            });

            checkARPastDue();
        }
        // =================
        // Check AR Past Due
        // =================
        function checkARPastDue() {
            $.ajax({
                url: '/api/accountsReceivable/pastDueList',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        document.getElementById('pastDueAR').innerHTML = " *AR Past Dues";
                    }
                    else {
                        document.getElementById('pastDueAR').innerHTML = "";
                    }
                }
            });

            checkStockLevel();
        }
        // =================
        // Check Stock Level
        // =================
        function checkStockLevel() {
            $.ajax({
                url: '/api/inventoryReport/stockLevelAlertList',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (results) {
                    if (results.length > 0) {
                        document.getElementById('stockLevelAlert').innerHTML = " *Stock Level Alert";
                    }
                    else {
                        document.getElementById('stockLevelAlert').innerHTML = "";
                    }
                }
            });
        }

        // =================
        // User Branch Combo
        // =================
        var cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches');

        // =========================
        // Get Current User Branches
        // =========================
        function getUserBranches() {
            $("#loadingUserBranches").show();
            document.getElementById("loadingUserBranches").innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            $("#userBranchContent").hide();

            $('#userBranchesModal').modal({ show: true, backdrop: 'static' });

            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
            $("#updateUserBranch").prop("disabled", false);
            $("#closeUserBranch").prop("disabled", false);

            var userBranchesObservableArray = new wijmo.collections.ObservableArray();
            $.ajax({
                url: '/api/userBranch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (userBranchesResults) {
                    if (userBranchesResults.length > 0) {
                        for (i = 0; i < userBranchesResults.length; i++) {
                            userBranchesObservableArray.push({
                                BranchId: userBranchesResults[i]["BranchId"],
                                Branch: userBranchesResults[i]["Branch"]
                            });
                        }
                    }

                    var currentBranch = "@ViewData["BranchId"]";
                    cboUserBranches.dispose();
                    cboUserBranches = new wijmo.input.ComboBox('#cboUserBranches', {
                        isEditable: false,
                        placeholder: "Select Branches",
                        itemsSource: userBranchesObservableArray,
                        displayMemberPath: "Branch",
                        selectedValuePath: "BranchId",
                        selectedValue: currentBranch
                    });

                    setTimeout(function () {
                        $("#loadingUserBranches").hide();
                        $("#userBranchContent").show();
                    }, 500)
                }
            });
        }

        // ==========================
        // Update Current User Branch
        // ==========================
        function updateUserBranchOnclick() {
            document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-spinner fa-spin'></i> Updating";
            $("#updateUserBranch").prop("disabled", true);
            $("#closeUserBranch").prop("disabled", true);

            var userBranchObject = new Object();
            userBranchObject.BranchId = cboUserBranches.selectedValue;
            var userBranchData = JSON.stringify(userBranchObject);

            $.ajax({
                type: "PUT",
                url: '/api/userBranch/update',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: userBranchData,
                statusCode: {
                    200: function () {
                        toastr.success("Update Successful");
                        window.setTimeout(function () {
                            location.reload()
                        }, 1000);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    },
                    500: function () {
                        toastr.error("Bad Request");
                        document.getElementById('updateUserBranch').innerHTML = "<i class='fa fa-save fa-fw'></i> Update";
                        $("#updateUserBranch").prop("disabled", false);
                        $("#closeUserBranch").prop("disabled", false);
                    }
                }
            });
        }
        // ====================
        // Navigate to Settings
        // ====================
        function btnNavigateSettingsOnclick() {
            if ("@ViewData["CanEditSettings"]" === "True") {
                window.location = '/Manage';
            }
            else {
                toastr.error("You have no sufficient rights to open Settings!");
            }
        }
    </script>
    <script type="text/javascript">
        // ======================
        // Side Bar Menu Settings
        // ======================
        var slideLeft = new Menu({
            wrapper: '#o-wrapper',
            type: 'slide-left',
            menuOpenerClass: '.c-button',
            maskId: '#c-mask'
        });

        var slideLeftBtn = document.querySelector('#c-button--slide-left');

        slideLeftBtn.addEventListener('click', function (e) {
            e.preventDefault;
            slideLeft.open();
        });
    </script>
</body>
</html>