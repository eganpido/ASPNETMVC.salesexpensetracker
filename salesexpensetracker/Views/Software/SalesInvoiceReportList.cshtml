@*@model easyfis.Entities.MstUserForm*@
@{
    // =====================
    // User Rights Variables
    // =====================
    //var canAdd = Model.CanAdd;
    //var canEdit = Model.CanEdit;
    //var canDelete = Model.CanDelete;
    //var canLock = Model.CanLock;
    //var canUnlock = Model.CanUnlock;
    //var canPrint = Model.CanPrint;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="shortcut icon" href="~/Images/icon/streetsmartLogo.ico">
    <title>Sales Invoice Report</title>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/2.3.2/css/dataTables.bootstrap.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

    @Styles.Render("~/Content/Software-css")
    <style>
        .panel-default > .panel-heading {
            border-radius: 11px;
        }

        .list-group-item.active, .list-group-item.active:focus, .list-group-item.active:hover {
            background-color: #3f9794;
            border-color: #3f9794;
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .m-0 {
            margin: 0.8%;
        }

        .header-flex {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

            .header-flex h5 {
                margin: 0;
            }

        .panel-title {
            font-family: Poppins;
        }
    </style>
</head>
<body>
    <div id="o-wrapper" class="o-wrapper">
        <main class="o-content">
            @Html.Partial("_SoftwareHeader")

            <div class="container">
                <h3>
                    🖨️ Sales Invoice Report
                </h3>
            </div>
            <section class="container">
                <div class="panel panel-default" style="border-radius:12px;">
                    <div class="panel-heading header-flex">
                        <h5>
                            Please select a report . . .
                        </h5>
                        <div style="display: inline-flex; gap: 10px;">
                            <button type="button" class="btn btn-primary" onclick="generate()">
                                <span class="glyphicon glyphicon-search"></span> Generate
                            </button>
                            <button type="button" class="btn btn-danger" onclick="closeReport()">
                                <span class="glyphicon glyphicon-remove"></span> Close
                            </button>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <!-- Left side: Report menu -->
                            <div class="col-md-3">
                                <div class="list-group">
                                    <a href="#" id="btnSummary" class="list-group-item active">Sales Invoice Summary</a>
                                    <a href="#" id="btnDetail" class="list-group-item">Sales Invoice Details</a>
                                </div>
                            </div>

                            <!-- Right side: Date filters -->
                            <div class="col-md-9">
                                <form class="form-horizontal" style="margin-left:10%;">
                                    <div class="form-group">
                                        <div class="date-wrapper">
                                            <label for="startDateInput">From:</label>
                                            <input type="text" id="startDateInput" class="form-control custom-date" placeholder="Select date" />
                                            <button type="button" class="calendar-button" data-target="#startDateInput" tabindex="-1">📅</button>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="date-wrapper">
                                            <label for="endDateInput">To:</label>
                                            <input type="text" id="endDateInput" class="form-control custom-date" placeholder="Select date" />
                                            <button type="button" class="calendar-button" data-target="#endDateInput" tabindex="-1">📅</button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                        <hr />
                    </div>
                </div>
                <hr />
                <!-- Summary Table -->
                <div id="summaryTableContainer" style="display:none;">
                    <div class="table-header">
                        <h3 class="m-0">📑 Sales Invoice Summary</h3>
                        <div style="display: inline-flex; gap: 10px; margin-right: 0.9%;">
                            <button type="button" class="btn btn-primary" onclick="exportSalesSummaryToCSV()">
                                <span class="glyphicon glyphicon-export"></span> Export (CSV)
                            </button>
                            <button type="button" class="btn btn-success" onclick="exportSalesSummaryToPDF()">
                                <span class="glyphicon glyphicon-print"></span> Print
                            </button>
                        </div>
                    </div>
                    <table id="summaryTable" class="table table-striped table-bordered">
                        <thead>
                            <tr class="selected">
                                <th>SI No.</th>
                                <th>SI Date</th>
                                <th>Client</th>
                                <th>SI Amount</th>
                                <th>Paid Amount</th>
                                <th>Balance Amount</th>
                            </tr>
                        </thead>
                        <tfoot>
                            <tr>
                                <th colspan="3" style="text-align: right;">Totals :</th>
                                <th class="text-right" id="salesAmountTotalFooter"></th>
                                <th class="text-right" id="paidAmountTotalFooter"></th>
                                <th class="text-right" id="balanceAmountTotalFooter"></th>
                            </tr>
                        </tfoot>
                        <tbody></tbody>
                    </table>
                </div>

                <!-- Detail Table -->
                <div id="detailTableContainer" style="display:none;">
                    <div class="table-header">
                        <h3 class="m-0">📑 Sales Invoice Details</h3>
                        <div style="display: inline-flex; gap: 10px; margin-right: 0.9%;">
                            <button type="button" class="btn btn-primary" onclick="exportSalesDetailToCSV()">
                                <span class="glyphicon glyphicon-export"></span> Export (CSV)
                            </button>
                            <button type="button" class="btn btn-success" onclick="exportSalesDetailToPDF()">
                                <span class="glyphicon glyphicon-print"></span> Print
                            </button>
                        </div>
                    </div>
                    <table id="detailTable" class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>SI No.</th>
                                <th>SI Date</th>
                                <th>Client</th>
                                <th>Product</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tfoot>
                            <tr>
                                <th colspan="5" style="text-align: right;">Totals :</th>
                                <th class="text-right" id="quantityTotalFooter"></th>
                                <th class="text-right" id="amountTotalFooter"></th>
                            </tr>
                        </tfoot>
                        <tbody></tbody>
                    </table>
                </div>
            </section>
            @Html.Partial("_SoftwareFooter")
        </main>
    </div>
    <div id="c-mask" class="c-mask"></div>

    @Scripts.Render("~/Scripts/Software-js")

    <script src="https://cdn.datatables.net/2.3.2/js/dataTables.js"></script>
    <script src="https://cdn.datatables.net/2.3.2/js/dataTables.bootstrap.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.1/jspdf.plugin.autotable.min.js"></script>

    <script type="text/javascript">
        function isValidDate(dateStr) {
            const d = new Date(dateStr);
            return !isNaN(d.getTime()) && d >= new Date('1753-01-01') && d <= new Date('9999-12-31');
        }
        function initializeDateFilters() {
            const today = new Date();
            const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
            const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

            flatpickr("#startDateInput", {
                dateFormat: "Y-m-d",
                defaultDate: firstDayOfMonth,
                minDate: "1753-01-01",
                maxDate: "9999-12-31",
                disableMobile: true
            });


            flatpickr("#endDateInput", {
                dateFormat: "Y-m-d",
                defaultDate: lastDayOfMonth,
                minDate: "1753-01-01",
                maxDate: "9999-12-31",
                disableMobile: true
            });
        }

        $('#btnSummary, #btnDetail').on('click', function (e) {
            e.preventDefault();
            $('.list-group-item').removeClass('active');
            $(this).addClass('active');
        });

        function generate() {
            const activeId = document.querySelector(".list-group-item.active").id;
            document.getElementById("summaryTableContainer").style.display = "none";
            document.getElementById("detailTableContainer").style.display = "none";

            if (activeId === "btnSummary") {
                document.getElementById("summaryTableContainer").style.display = "block";
                loadSummaryData();
            } else if (activeId === "btnDetail") {
                document.getElementById("detailTableContainer").style.display = "block";
                loadDetailData();
            }
        }
        function getBase64Image(imgUrl, callback) {
            const img = new Image();
            img.crossOrigin = "Anonymous";
            img.src = imgUrl;
            img.onload = function () {
                const canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                const ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);
                const dataURL = canvas.toDataURL("image/png");
                callback(dataURL);
            };
        }
        // Sales Summary Report Population, Export CSV, and Print
        function loadSummaryData() {
            Loader.show();
            if ($.fn.DataTable.isDataTable('#summaryTable')) {
                $('#summaryTable').DataTable().clear().destroy();
            }
            $('#summaryTable tbody').off('click');

            $('#summaryTable tbody').on('click', 'tr', function () {
                $('#summaryTable tbody tr').removeClass('selected');
                $(this).addClass('selected');
            });

            const startDate = $('#startDateInput').val();
            const endDate = $('#endDateInput').val();

            $('#summaryTable').DataTable({
                ajax: {
                    url: '/api/salesInvoiceReport/salesSummaryReport/' + startDate + "/" + endDate,
                    dataSrc: ''
                },
                columns: [
                    { data: 'SalesNumber', className: 'text-left', width: '10%' },
                    {
                        data: 'SalesDate',
                        render: function (data, type, row) {
                            if (!data) return '';
                            const date = new Date(data);
                            return date.getFullYear() + '-' +
                                String(date.getMonth() + 1).padStart(2, '0') + '-' +
                                String(date.getDate()).padStart(2, '0');
                        }, className: 'text-left', width: '10%'
                    },
                    { data: 'Client', width: '20%' },
                    {
                        data: 'SalesAmount',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                return parseFloat(data).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            }
                            return data;
                        }, width: '10%'
                    },
                    {
                        data: 'PaidAmount',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                return parseFloat(data).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            }
                            return data;
                        }, width: '10%'
                    },
                    {
                        data: 'BalanceAmount',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                return parseFloat(data).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            }
                            return data;
                        }, width: '10%'
                    }
                ],
                pageLength: 10,
                responsive: true,
                language: {
                    search: "Search:  ",
                    emptyTable: "No record(s) available",
                    lengthMenu: "_MENU_ Records per page",
                    info: "_START_ - _END_ of _TOTAL_ record(s) is displayed"
                },
                footerCallback: function (row, data, start, end, display) {
                    const api = this.api();

                    const parseNumber = (val) => parseFloat(val || 0);

                    const formatNumber = (num) =>
                        num.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');

                    let pageInfo = api.page.info();
                    let currentPage = pageInfo.page;
                    let length = pageInfo.length;
                    let rowsUpToCurrentPage = api.rows({ search: 'applied' }).indexes().filter((idx, i) => {
                        return i < (currentPage + 1) * length;
                    });

                    let siTotal = api
                        .cells(rowsUpToCurrentPage, 3)
                        .data()
                        .reduce((a, b) => parseNumber(a) + parseNumber(b), 0);

                    let paidTotal = api
                        .cells(rowsUpToCurrentPage, 4)
                        .data()
                        .reduce((a, b) => parseNumber(a) + parseNumber(b), 0);

                    let balanceTotal = api
                        .cells(rowsUpToCurrentPage, 5)
                        .data()
                        .reduce((a, b) => parseNumber(a) + parseNumber(b), 0);
                    $('#salesAmountTotalFooter').html(formatNumber(siTotal));
                    $('#paidAmountTotalFooter').html(formatNumber(paidTotal));
                    $('#balanceAmountTotalFooter').html(formatNumber(balanceTotal));
                }
            });

            setTimeout(() => {
                Loader.hide();
            }, 1000);
        }
        function exportSalesSummaryToCSV() {
            const table = $('#summaryTable').DataTable();
            const data = table.rows({ search: 'applied' }).data().toArray();

            if (!data.length) {
                alert("No data to export!");
                return;
            }
            const headers = ["Sales Number", "Sales Date", "Client", "Sales Amount", "Paid Amount", "Balance Amount"];
            let csvContent = headers.join(",") + "\n";
            data.forEach(row => {
                const salesDate = row.SalesDate ? new Date(row.SalesDate) : "";
                const formattedDate = salesDate
                    ? salesDate.getFullYear() + "-" +
                    String(salesDate.getMonth() + 1).padStart(2, "0") + "-" +
                    String(salesDate.getDate()).padStart(2, "0")
                    : "";

                csvContent += [
                    row.SalesNumber,
                    formattedDate,
                    `"${row.Client}"`,
                    parseFloat(row.SalesAmount).toFixed(2),
                    parseFloat(row.PaidAmount).toFixed(2),
                    parseFloat(row.BalanceAmount).toFixed(2)
                ].join(",") + "\n";
            });
            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const url = URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.setAttribute("href", url);
            link.setAttribute("download", "SalesInvoiceSummaryReport.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        async function exportSalesSummaryToPDF() {
            const table = $('#summaryTable').DataTable();
            const data = table.rows({ search: 'applied' }).data().toArray();
            if (!data.length) {
                alert("No data to export!");
                return;
            }
            const headers = ["Sales Number", "Sales Date", "Client", "Sales Amount", "Paid Amount", "Balance Amount"];
            const totalSales = data.reduce((sum, row) => sum + parseFloat(row.SalesAmount || 0), 0);
            const totalPaid = data.reduce((sum, row) => sum + parseFloat(row.PaidAmount || 0), 0);
            const totalBalance = data.reduce((sum, row) => sum + parseFloat(row.BalanceAmount || 0), 0);
            const formatAmount = (val) =>
                parseFloat(val || 0).toLocaleString("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const rows = data.map(row => {
                const salesDate = row.SalesDate ? new Date(row.SalesDate) : "";
                const formattedDate = salesDate
                    ? salesDate.getFullYear() + "-" +
                    String(salesDate.getMonth() + 1).padStart(2, "0") + "-" +
                    String(salesDate.getDate()).padStart(2, "0")
                    : "";

                return [
                    row.SalesNumber,
                    formattedDate,
                    row.Client,
                    formatAmount(row.SalesAmount),
                    formatAmount(row.PaidAmount),
                    formatAmount(row.BalanceAmount)
                ];
            });
            rows.push([
                { content: "TOTALS : ", colSpan: 3, styles: { halign: "right", fontStyle: "bold" } },
                { content: formatAmount(totalSales), styles: { halign: "right", fontStyle: "bold" } },
                { content: formatAmount(totalPaid), styles: { halign: "right", fontStyle: "bold" } },
                { content: formatAmount(totalBalance), styles: { halign: "right", fontStyle: "bold" } }
            ]);
            getBase64Image("/Images/logo/streetsmartLogo.png", function (logoBase64) {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF("landscape");

                doc.setFont("helvetica", "normal");
                doc.addImage(logoBase64, "PNG", 14, 10, 20, 20); // x, y, w, h
                doc.setFontSize(14);
                const pageWidth = doc.internal.pageSize.getWidth();
                const title = "Sales Invoice Summary Report";
                const textWidth = doc.getTextWidth(title);
                const x = (pageWidth - textWidth) / 2;
                doc.text(title, x, 22);

                doc.autoTable({
                    head: [headers],
                    body: rows,
                    startY: 35,
                    styles: { font: "helvetica", fontSize: 9 },
                    headStyles: { fillColor: [36, 156, 124], font: "helvetica", halign: "center" },
                    columnStyles: {
                        3: { halign: "right" },
                        4: { halign: "right" },
                        5: { halign: "right" }
                    },
                    theme: "grid",
                    didDrawPage: function (data) {
                        const str = "Printed on: " + new Date().toLocaleString();
                        doc.setFontSize(8);
                        doc.text(str, data.settings.margin.left, doc.internal.pageSize.getHeight() - 5);
                    }
                });

                doc.save("SalesInvoiceSummaryReport.pdf");
            });
        }

        // Sales Detail Report Population, Export CSV, Print
        function loadDetailData() {
            Loader.show();
            if ($.fn.DataTable.isDataTable('#detailTable')) {
                $('#detailTable').DataTable().clear().destroy();
            }

            $('#detailTable tbody').off('click');

            $('#detailTable tbody').on('click', 'tr', function () {
                $('#detailTable tbody tr').removeClass('selected');
                $(this).addClass('selected');
            });

            const startDate = $('#startDateInput').val();
            const endDate = $('#endDateInput').val();

            $('#detailTable').DataTable({
                ajax: {
                    url: '/api/salesInvoiceReport/salesDetailReport/' + startDate + "/" + endDate,
                    dataSrc: ''
                },
                columns: [
                    { data: 'SalesNumber', className: 'text-left', width: '10%' },
                    {
                        data: 'SalesDate',
                        render: function (data, type, row) {
                            if (!data) return '';
                            const date = new Date(data);
                            return date.getFullYear() + '-' +
                                String(date.getMonth() + 1).padStart(2, '0') + '-' +
                                String(date.getDate()).padStart(2, '0');
                        }, className: 'text-left', width: '10%'
                    },
                    { data: 'Client', width: '20%' },
                    { data: 'Product', width: '20%' },
                    {
                        data: 'Price',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                return parseFloat(data).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            }
                            return data;
                        }, width: '10%'
                    },
                    {
                        data: 'Quantity',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                return parseFloat(data).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            }
                            return data;
                        }, width: '10%'
                    },
                    {
                        data: 'Amount',
                        render: function (data, type, row) {
                            if (type === 'display') {
                                return parseFloat(data).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            }
                            return data;
                        }, width: '10%'
                    }
                ],
                pageLength: 10,
                responsive: true,
                language: {
                    search: "Search:  ",
                    emptyTable: "No record(s) available",
                    lengthMenu: "_MENU_ Records per page",
                    info: "_START_ - _END_ of _TOTAL_ record(s) is displayed"
                },
                footerCallback: function (row, data, start, end, display) {
                    const api = this.api();

                    const parseNumber = (val) => parseFloat(val) || 0;
                    const formatNumber = (num) =>
                        num.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });

                    let pageInfo = api.page.info();
                    let currentPage = pageInfo.page;
                    let length = pageInfo.length;
                    let rowsUpToCurrentPage = api.rows({ search: 'applied' }).indexes().filter((idx, i) => {
                        return i < (currentPage + 1) * length;
                    });

                    let qtyTotal = api
                        .cells(rowsUpToCurrentPage, 5)
                        .data()
                        .reduce((a, b) => parseNumber(a) + parseNumber(b), 0);

                    let amountTotal = api
                        .cells(rowsUpToCurrentPage, 6)
                        .data()
                        .reduce((a, b) => parseNumber(a) + parseNumber(b), 0);

                    $('#quantityTotalFooter').html(formatNumber(qtyTotal));
                    $('#amountTotalFooter').html(formatNumber(amountTotal));
                }
            });

            setTimeout(() => {
                Loader.hide();
            }, 1000);
        }
        function exportSalesDetailToCSV() {
            const table = $('#detailTable').DataTable();
            const data = table.rows({ search: 'applied' }).data().toArray();

            if (!data.length) {
                alert("No data to export!");
                return;
            }
            const headers = ["Sales Number", "Sales Date", "Client", "Product", "Price", "Quantity", "Amount"];
            let csvContent = headers.join(",") + "\n";
            data.forEach(row => {
                const salesDate = row.SalesDate ? new Date(row.SalesDate) : "";
                const formattedDate = salesDate
                    ? salesDate.getFullYear() + "-" +
                    String(salesDate.getMonth() + 1).padStart(2, "0") + "-" +
                    String(salesDate.getDate()).padStart(2, "0")
                    : "";

                csvContent += [
                    row.SalesNumber,
                    formattedDate,
                    `"${row.Client}"`,
                    `"${row.Product}"`,
                    parseFloat(row.Price).toFixed(2),
                    parseFloat(row.Quantity).toFixed(2),
                    parseFloat(row.Amount).toFixed(2)
                ].join(",") + "\n";
            });
            const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
            const url = URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.setAttribute("href", url);
            link.setAttribute("download", "SalesInvoiceDetailReport.csv");
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        async function exportSalesDetailToPDF() {
            const table = $('#detailTable').DataTable();
            const data = table.rows({ search: 'applied' }).data().toArray();
            if (!data.length) {
                alert("No data to export!");
                return;
            }
            const headers = ["Sales Number", "Sales Date", "Client", "Product", "Price", "Amount"];
            const totalQuantity = data.reduce((sum, row) => sum + parseFloat(row.Quantity || 0), 0);
            const totalAmount = data.reduce((sum, row) => sum + parseFloat(row.Amount || 0), 0);
            const formatAmount = (val) =>
                parseFloat(val || 0).toLocaleString("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            const rows = data.map(row => {
                const salesDate = row.SalesDate ? new Date(row.SalesDate) : "";
                const formattedDate = salesDate
                    ? salesDate.getFullYear() + "-" +
                    String(salesDate.getMonth() + 1).padStart(2, "0") + "-" +
                    String(salesDate.getDate()).padStart(2, "0")
                    : "";

                return [
                    row.SalesNumber,
                    formattedDate,
                    row.Client,
                    row.Product,
                    formatAmount(row.Price),
                    formatAmount(row.Quantity),
                    formatAmount(row.Amount)
                ];
            });
            rows.push([
                { content: "TOTALS : ", colSpan: 4, styles: { halign: "right", fontStyle: "bold" } },
                { content: formatAmount(totalQuantity), styles: { halign: "right", fontStyle: "bold" } },
                { content: formatAmount(totalAmount), styles: { halign: "right", fontStyle: "bold" } }
            ]);
            getBase64Image("/Images/logo/streetsmartLogo.png", function (logoBase64) {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF("landscape");

                doc.setFont("helvetica", "normal");
                doc.addImage(logoBase64, "PNG", 14, 10, 20, 20); // x, y, w, h
                doc.setFontSize(14);
                const pageWidth = doc.internal.pageSize.getWidth();
                const title = "Sales Invoice Detail Report";
                const textWidth = doc.getTextWidth(title);
                const x = (pageWidth - textWidth) / 2;
                doc.text(title, x, 22);

                doc.autoTable({
                    head: [headers],
                    body: rows,
                    startY: 35,
                    styles: { font: "helvetica", fontSize: 9 },
                    headStyles: { fillColor: [36, 156, 124], font: "helvetica", halign: "center" },
                    columnStyles: {
                        4: { halign: "right" },
                        5: { halign: "right" },
                        6: { halign: "right" }
                    },
                    theme: "grid",
                    didDrawPage: function (data) {
                        const str = "Printed on: " + new Date().toLocaleString();
                        doc.setFontSize(8);
                        doc.text(str, data.settings.margin.left, doc.internal.pageSize.getHeight() - 5);
                    }
                });

                doc.save("SalesInvoiceDetailReport.pdf");
            });
        }

        // Close
        function closeReport() {
            window.location = '/Software';
        }

        // On Load Page
        $(document).ready(function () {
            Loader.show();
            initializeDateFilters();
            setTimeout(() => {
                Loader.hide();
            }, 1000);
        });
    </script>
    <div id="loader-overlay">
        <div class="loader-circle"></div>
    </div>
</body>
</html>